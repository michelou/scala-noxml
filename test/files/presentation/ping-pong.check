reload: PingPong.scala

askTypeCompletion at PingPong.scala(10,23)
================================================================================
[response] aksTypeCompletion at (10,23)
retrieved 40 members
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(Pong, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method asInstanceOf[T0]=> T0`
`method clone()Object`
`method ensuring(cond: Boolean)Pong`
`method ensuring(cond: Boolean, msg: => Any)Pong`
`method ensuring(cond: Pong => Boolean)Pong`
`method ensuring(cond: Pong => Boolean, msg: => Any)Pong`
`method eq(x$1: AnyRef)Boolean`
`method equals(x$1: Any)Boolean`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method hashCode()Int`
`method isInstanceOf[T0]=> Boolean`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method poke()Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> Pong`
`method →[B](y: B)(Pong, B)`
`value __leftOfArrowPong`
`value __resultOfEnsuringPong`
`value nameString`
`value pingPing`
`value selfAny`
================================================================================

askTypeCompletion at PingPong.scala(19,20)
================================================================================
[response] aksTypeCompletion at (19,20)
retrieved 40 members
`method !=(x$1: Any)Boolean`
`method !=(x$1: AnyRef)Boolean`
`method ##()Int`
`method +(other: String)String`
`method ->[B](y: B)(Ping, B)`
`method ==(x$1: Any)Boolean`
`method ==(x$1: AnyRef)Boolean`
`method asInstanceOf[T0]=> T0`
`method clone()Object`
`method ensuring(cond: Boolean)Ping`
`method ensuring(cond: Boolean, msg: => Any)Ping`
`method ensuring(cond: Ping => Boolean)Ping`
`method ensuring(cond: Ping => Boolean, msg: => Any)Ping`
`method eq(x$1: AnyRef)Boolean`
`method equals(x$1: Any)Boolean`
`method finalize()Unit`
`method formatted(fmtstr: String)String`
`method hashCode()Int`
`method isInstanceOf[T0]=> Boolean`
`method loop=> Unit`
`method name=> String`
`method ne(x$1: AnyRef)Boolean`
`method notify()Unit`
`method notifyAll()Unit`
`method poke=> Unit`
`method synchronized[T0](x$1: T0)T0`
`method toString()String`
`method wait()Unit`
`method wait(x$1: Long)Unit`
`method wait(x$1: Long, x$2: Int)Unit`
`method x=> Ping`
`method →[B](y: B)(Ping, B)`
`value __leftOfArrowPing`
`value __resultOfEnsuringPing`
`value pongPong`
`value selfAny`
================================================================================

askType at PingPong.scala(8,10)
================================================================================
[response] askTypeAt at (8,10)
def loop: Unit = Ping.this.poke()
================================================================================

askType at PingPong.scala(10,10)
================================================================================
[response] askTypeAt at (10,10)
def poke: Unit = Ping.this.pong.poke()
================================================================================

askType at PingPong.scala(17,10)
================================================================================
[response] askTypeAt at (17,10)
private[this] val name: String = "pong"
================================================================================
